# Branch #

ให้จำกฎนี้ไว้ก่อน

- โค้ดใน Branch master จะต้องเชื่อถือได้เสมอ
- การเขียนโค้ดจะต้องไม่ทำใน Branch master

การแตก Branch เป็นคุณสมบัติหนึ่งของ Git เขาแตกเพื่อแยกสายการพัฒนา หรือจะแตกออกไปเพื่อทดสอบเขียนโค้ดก็ได้ หลังจากทดสอบเสร็จค่อย swap กลับมา Branch หลักแล้วลบ Branch ทดสอบทิ้ง 

Branch แรกที่จะมีมาเลยคือ master master จะเป็น Branch หลักและเราจะไม่เขียนโค้ดในนี้ มันจะเป็น Branch ที่ไว้ใช้สำหรับเอาโค้ดขึ้นโปรดักชั่นเท่านั้น ปกติเขาจะแตก branch ออกมา branch หนึ่งตั้งชื่อว่า developer (นิยมกันอย่างนั้น) แล้วก็เขียนโค้ดแก้โค้ดกันใน branch นี้ เมื่อทดสอบโค้ดจนแน่ใจและพร้อมจะเอามันขึ้นโปรดักชั่นแล้ว ก็จะทำการ merge โค้ดจาก developer เข้า master แล้วเอาโค้ดจาก master ขึ้นโปรดักชั่น 

หากจะถามว่าทำไมต้องทำให้มันดูวุ่นวายอย่างงั้น ให้กลับไปอ่านกฎ และจริงๆแล้วสิ่งที่แนะนำไว้มันเป็น best practice ที่ดีที่สุด

อันนี้ขอเล่าสิ่งที่บริษัทผมทำนะครับ  ตอนเราเริ่มโปรเจ็กใหม่ เรามอบหน้าที่ให้คนหนึ่งไปสร้าง Repository บน bitbucket ขึ้นมา 1 ตัว แตก Branch developer ไว้เลย แล้วทุกคนก็   clone Repository ลงมาเขียนโค้ดกันใน Branch developer ทดสอบโค้ดกันใน branch นี้จากนั้นเมื่อทุกอย่างเรียบร้อย จะเอาขึ้นโปรดักชั่นแล้ว คนหนึ่งก็จะทำการ merge โค้ดเข้า master แล้วเอาโค้ดขึ้นโปรดักชั่น เสร็จก็สร้าง tag เวอชั่นไว้ ทำอย่างนี้วนไปเรื่อยๆ 

## การแตก branch ##


1. เปิด Source Tree ขึ้นมา

2. คลิกที่ปุ่ม Branch ตรง Tools bar

    ![](images/chapter_5/branching_01.png)      

3. ตั้งชื่อ branch ใหม่ในช่อง New Branch จากนั้นคลิกปุ่ม Create Branches ในกรณีต้องการเลือกจุดตั้งต้นของโค้ดไม่ใช่จากปัจจุบัน เราสามารถเลือกเอาจาก Specified Commit ส่วนตัวเลือก Checkout New Branch หมายถึงให้สลับไปใช้ Branch ใหม่เลยหรือไม่

    ![](images/chapter_5/branching_02.png)      

4. สังเกตที่เพนด้านซ้ายมือจะเห็น Branch ใหม่เพิ่มขึ้นมา

    ![](images/chapter_5/branching_03.png)     

5. สังเกตที่เพนด้านซ้ายในกลุ่ม Remotes จะยังไม่มี Branch ใหม่เพิ่มเข้าไป นั่นเป็นเพราะว่าเรายังไม่ได้ Push Branch ขึ้นเซิฟเวอร์

    ![](images/chapter_5/branching_04.png)     

6. สังเกตที่เพนด้านซ้ายในกลุ่ม Remotes จะยังไม่มี Branch ใหม่เพิ่มเข้าไป นั่นเป็นเพราะว่าเรายังไม่ได้ Push Branch ขึ้นเซิฟเวอร์  การที่เราจะ Push Branch ขึ้นเซิฟเวอร์หรือไม่นั้น ขึ้นอยู่กับว่า Branch นั้นเป็น Branch ที่เราสร้างขึ้นมาเพื่อใช้งานเพียงชั่วคราวหรือเปล่า หากใช้ชั่วคราวส่วนตัว ไม่นานก็ลบออก ก็ไม่จำเป็นจะต้อง Push ขึ้นเซิฟเวอร์ก็ได้ แต่ถ้าเป็น Branch ที่ใช้ร่วมกับทีม ก็ต้อง Push ขึ้น Server

    ![](images/chapter_5/branching_05.png)     
    
7. คลิกปุ่ม Push ใน Tools bar เมื่อหน้าต่าง Push แสดงขึ้นมา ให้ติ๊กเลือก Branch ใหม่ที่เพิ่งสร้างจากนั้นคลิกปุ่ม OK

    ![](images/chapter_5/branching_06.png) 
    

8. รอสักครู่ สังเกตเพนซ้ายในกลุ่ม Remotes จะมีชื่อ Branch ที่เราสร้างขึ้นใหม่แสดงอยู่ในกลุ่มด้วย

    ![](images/chapter_5/branching_07.png)  

## การสลับ branch ##

1. ไปที่ Source Tree

2. ดับเบิลคลิกชื่อ Branch ที่เราต้องการสลับไปใช้ 

    ![](images/chapter_5/checkout_01.png)
    
    หรือใช้วิธี คลิกขวาตรงชื่อ Branch ที่เราต้องการสลับไปใช้ จากนั้นคลิกเลือก Checkout ...
    
    ![](images/chapter_5/checkout_02.png)

3. ให้สังเกตว่าชื่อ Branch ที่ Active อยู่จะเป็นสีดำ และมีไอคอนเครื่องหมายถูกเล็กๆอยู่ด้านหน้า

    ![](images/chapter_5/checkout_03.png)
  
การทำความเข้าใจเรื่องการสลับ Branch นั้น ให้ท่านแก้ไขโค้ดใน Branch ใดก็ได้จากนั้น Commit และ Push ซะ จากนั้นสลับไป Branch อื่น ลองสังเกตโค้ดนะครับ มันจะเปลี่ยนแปลงไป ลองเล่นหลายๆรอบดู

## การลบ branch ##

1. เปิด Source Tree

2. คลิกขวาตรงชื่อ Branch ที่ต้องการลบทิ้ง เลือก Delete ...

    ![](images/chapter_5/delete_branch_1_01.png)      

3. จะมีหน้าต่างขึ้นมาถามให้ยืนยัน ติ๊กเครื่องหมายถูกหน้า force delete  จากนั้นคลิกปุ่ม OK 

    ![](images/chapter_5/delete_branch_1_02.png)      

## การลบ branch วิธีที่ 2 ##

1. เปิด Source Tree

2. คลิกปุ่ม Branch ใน Tools bar

    ![](images/chapter_5/delete_branch_2_01.png)      

3. จะมีหน้าต่างขึ้นมา ให้คลิกแท็บ Delete ติ๊กเลือก Branch ที่ต้องการลบ ติ๊กเลือก force delete regardless of merge status จากนั้นคลิกปุ่ม Delete Branches

    ![](images/chapter_5/delete_branch_2_02.png) 
    
3. หน้าต่าง Confirm Deletion ขึ้นมาถามให้ยืนยันอีกครั้ง คลิกปุ่ม OK

    ![](images/chapter_5/delete_branch_2_03.png)      

4. Branch ที่เลือกไว้จะถูกลบทิ้งไป

    ![](images/chapter_5/delete_branch_2_04.png)      


## tag ความหมายและการใช้งาน ##

tag ก็คือป้ายบอกจุด หรือ ตำแหน่ง ที่เรากำหนดไว้ว่าตรงนี้คือโค้ดเวอชั่นเท่าไร ปกติแล้วเราจะทำการ tag เมื่อโค้ดที่เราเขียนเราเอาขึ้นโปรดักชั่น การกำหนดหมายเลขเวอชั่นนั้น เป็นอะไรที่วุ่นวายไม่น้อย มีทั้งเวอร์ชั่นใหญ่ เวอร์ชั่นย่อย เวอชั่นเบต้า เวอชั่นอาซี (release candidate) ท่านต้องไปหาอ่านเพิ่มเติมจากกูเกิลนะครับ แต่ถ้าจะเอากันง่ายๆ เมื่อไรที่เอาโค้ดขึ้นโปรดักชั่นก็ tag เป็นหนึ่งเวอร์ชั่น ไม่ได้มีใครว่าอะไร




