# บทที่ 3 Working with Git Locally #

ก่อนอื่นผมอยากจะแนะนำคำศัพท์คำหนึ่งก่อน คือ repository repository ถ้าจะให้คิดง่ายๆมันก็คือโปรเจ็กนั่นเอง ก่อนที่เราจะใช้งาน Git ได้เราต้องสร้าง repository ขึ้นมาก่อน จากนั้นอะไรก็ตามที่มีการเปลี่ยนแปลงภายใน repository นั้น Git มันจะสามารถจับได้ทั้งหมด ไม่ว่าจะมีไฟล์ใหม่เพิ่มเข้ามา, ไฟล์ถูกลบออกไป หรือ ไฟล์ถูกแก้ไข

เรามาทดลองเล่นกับ Git ไปตามขั้นตอน ดู

## สร้าง repository ##

1.	เปิด Source Tree ขึ้นมา
	
	![](images/chapter-3/init_repository_01.png)

2.	คลิกปุ่ม Clone / New
	
	![](images/chapter-3/init_repository_02.png)

3.	หน้าต่าง Clone / Add / Create Repository จะเปิดขึ้นมา ให้คลิกไปที่แท็บ Create New Repository ช่อง Repository Type เลือกเป็น Git จากนั้นคลิกปุ่ม ... ที่อยู่ด้านหลัง Destination Path เพื่อระบุโฟลเดอร์สำหรับ Repository
	
	![](images/chapter-3/init_repository_03.png)
    
4.	สร้างโฟลเดอร์ใหม่ชื่อ my-website ไว้ที่ C:\xampp\htdocs  จากนั้นเลือกโฟลเดอร์นี้เป็นโฟลเดอร์สำหรับ Repository
	
	![](images/chapter-3/init_repository_04.png)
    
5.	เมื่อเลือกโฟลเดอร์สำหรับ Repository แล้วคลิกปุ่ม Create
	
	![](images/chapter-3/init_repository_05.png)
    
6.	Repository จะถูกสร้างขึ้นมา
	
	![](images/chapter-3/init_repository_06.png)
    
    
## ทดลองเล่น Git ครั้งแรก ##    

เอาล่ะ หลังจากสร้าง Repository ขึ้นมาแล้ว เรามาลองเล่นกับ Git ดูหน่อยเป็นการเรียกน้ำย่อยในเบื้องต้น และเพื่อพอให้รู้คร่าวๆ ว่าแท้จริงแล้ว Git มันทำอะไรเพื่อเราบ้างและมันไว้ใช้ทำอะไรกันแน่

1.	เข้าไปยังโฟลเดอร์ C:\xampp\htdocs\my-website 

2.	สร้างไฟล์ใหม่ขึ้นมาสักไฟล์ชื่อ info.php ข้างในเขียนคำสั่งดังภาพแล้วบันทึก
	
	![](images/chapter-3/try_git_01.png)

3.	ไปที่โปรแกรม Source Tree จะเห็นว่าไฟล์ที่เราเพิ่มเข้าไปในโฟลเดอร์จะถูก Git มองเห็น และหากคลิกที่ไฟล์จะเห็นด้วยว่า Git มันรู้ว่าภายในไฟล์เกิดการเปลี่ยนแปลงอะไร
	
	![](images/chapter-3/try_git_02.png)
    
4.	ติ๊กเครื่องหมายถูกหน้าไฟล์ เพื่อเลือกไฟล์ ไฟล์ที่ถูกเลือกจะเลื่อนขึ้นไปอยู่ที่ช่องด้านบน
	
	![](images/chapter-3/try_git_03.png)
    
5.	พิมพ์บันทึกความจำลงไปในช่อง Commit Message จากนั้นคลิกปุ่ม Commit
	
	![](images/chapter-3/try_git_04.png)
    
6.	รอแป้บนึง จากนั้นคลิกที่แท็บ Log History ดู จะเห็นข้อความบันทึกความจำของเรา 1 รายการ
	
	![](images/chapter-3/try_git_05.png)    
    
กระบวนการการทำตรงนี้ เรียกว่าบันทึกการเปลี่ยนแปลงของโค้ด เราจะใช้เมื่อเราเขียนโค้ด เขียนๆๆๆ ทดสอบๆๆๆ จนมันทำงานตามที่เราต้องการแล้ว เราก็บันทึกมันไว้ พร้อมเขียนข้อความเตือนความจำว่าเราได้ทำอะไรกับโค้ดลงไป

ทีนี้เรามาลองต่อ 

7.	เปิดไฟล์ info.php ของเราขึ้นมา แล้วลองแก้ไขโค้ดใหม่ (อย่าลืมบันทึก)
	
	![](images/chapter-3/try_git_07.png)    
    
8.	กลับไปที่โปรแกรม Source Tree จะเห็นว่า Source Tree มันรู้ว่าเราเปลี่ยนแปลงโค้ดบรรทัดไหนไปบ้าง หากดูทางเพนขวามือสุด จะเห็นบางบรรทัดเป็นสีขาว นั่นหมายถึงโค้ดบรรทัดนั้นไม่มีการเปลี่ยนแปลง และจะห็นบางบรรทัดเป็นสีเขียว และมีเครื่องหมาย + อยู่ด้านหน้า นั่นหมายความว่า โค้ดบรรทัดนั้นๆถูกเพิ่มเข้ามาใหม่ 
	
	![](images/chapter-3/try_git_08.png)    
        
9.	คลิกที่ปุ่ม ... ด้านหลังชื่อไฟล์ (ปุ่มมันจะเล็กมาก) คลิกเลือก  Discard File
	
	![](images/chapter-3/try_git_09.png)    
    
10.	จะมีหน้าต่างยืนยันขึ้นมา คลิกปุ่ม OK
	
	![](images/chapter-3/try_git_10.png)    
    
11.	จากนั้นเปิดไฟล์ info.php ขึ้นมา จะเห็นว่าโค้ดที่เราใส่เข้าไปใหม่ ถูกเอาออกทั้งหมด
	
	![](images/chapter-3/try_git_11.png)    
    
กระบวนการตรงนี้ เป็นการยกเลิกการเปลี่ยนแปลงโค้ด มันจะมีประโยชน์มากในกรณีเราอยากทดลองเปลี่ยนนั่น เล่นนี่กับโค้ด เมื่อสิ้นวันเราไม่จำเป็นต้องมานั่งจำว่าเราเล่นอะไรโค้ดไปบ้าง  เราแค่ Discard มันทิ้งเท่านั้นเอง โค้ดก็จะกลับมาเหมือนไม่มีอะไรเกิดขึ้น 

นี่ถ้าไม่ใช้ Git คงต้องสำเนาโค้ดก่อนการเล่นกับมัน แต่ถ้าเราลืมสำเนาไว้ล่ะ 

ลองเล่นต่ออีกหน่อย 

12.	เข้าไปยังโฟลเดอร์ C:\xampp\htdocs\my-website ลบไฟล์ info.php ทิ้ง

13.	จากนั้นเปิดโปรแกรม Source Tree จะเห็นว่า Source Tree  ก็รู้ว่าไฟล์ถูกลบไป
	
	![](images/chapter-3/try_git_12.png)    
    
14.	ให้บันทึกการเปลี่ยนแปลงนี้ไว้ โดยการติ๊กเลือกชื่อไฟล์ เขียนบันทึกความทรงจำ แล้วคลิกปุ่ม Commit
	
	![](images/chapter-3/try_git_13.png)
    
การเปลี่ยนแปลง ที่เราบันทึกไว้เป็นระยะๆ มันเป็นเหมือน Save Point ที่เราสามารถไปเรียกมันกลับมาดูเมื่อไรก็ได้ 

15.	ที่ Source Tree คลิกแท็บ Log / History คลิกขวาตรง Save Point ก่อนหน้าเราจะลบไฟล์ info.php ทิ้ง 
	จากนั้นคลิกเลือก Checkout...
    
	![](images/chapter-3/try_git_14.png)   
    
16.	จะมีคำเตือนบางอย่างแสดงขึ้นมา (บางทีก็ไม่มี ไม่ต้องตกใจนะ) ไม่ต้องสนใจ คลิกปุ่ม OK

	![](images/chapter-3/try_git_15.png)        
    
17.	กลับไปดูโฟลเดอร์ C:\xampp\htdocs\my-website จะเห็นว่าไฟล์ info.php ที่เราลบมันทิ้งไปถูกเรียกกลับคืนมา พร้อมทั้งโค้ดที่อยู่ภายใน ไม่หายไปสักบรรทัด

	![](images/chapter-3/try_git_16.png)
    
เป็นไงบ้างครับ พอเห็นประโยชน์จากการใช้งาน Git นะครับ นี่เป็นเพียงแค่น้ำจิ้มเท่านั้น 

## Commit ##

การ Commit คือการบันทึกการเปลี่ยนแปลงของโค้ด ปกติเราจะเขียนโค้ดแล้วก็ทดสอบ แก้ไข จนโค้ดมันใช้งานได้ดี ถูกต้องแล้ว เราก็จะทำการบันทึกการเปลี่ยนแปลงโค้ดไว้ทีหนึ่ง การบันทึกนี้ไม่ควรปล่อยให้โค้ดมีการแก้ไขเยอะแล้วถึงจะทำทีหนึ่ง ทางที่ดีที่สุดคือ Commit เป็นระยะๆ

1. ทดลองสร้างไฟล์ใหม่เข้าไปในโฟลเดอร์ C:\xampp\htdocs\my-website เขียนโค้ดใส่เข้าไปในไฟล์ เสร็จแล้วบันทึก

    ![](images/chapter-3/commit_01.png)

2. เปิด Source Tree จะเห็นไฟล์ที่เพิ่งสร้างเข้าไปอยู่ในกลุ่ม Unstaged Files ติ๊กเลือกให้ไปอยู่ในกลุ่ม Staged Files

    ![](images/chapter-3/commit_02.png)

3. คลิกตรง Commit Message พิมพ์บันทึกความจำว่าเราทำอะไรลงไปกับโค้ด จากนั้นคลิกปุ่ม Commit

    ![](images/chapter-3/commit_03.png)
    
4. ทดลองแก้ไขโค้ดในไฟล์ แล้ว Commit ลองเล่นดูหลายๆครั้ง สัก 10 ครั้งก็ได้

5. คลิกที่แท็บ Log / History จะเห็นบันทึกทั้งหมด

    ![](images/chapter-3/commit_04.png)

## Undo ##    

สำหรับคนที่ไม่ได้ใช้ Git แล้ว การจะทดลองเล่นกับโค้ดหรือลองเขียน เป็นความเสี่ยงอย่างหนึ่ง ต้องห้ามลืม backup เพราะว่ามันจำเป็นจะต้องเอาโค้ดกลับมาเป็นเหมือนเดิม แก้เล็กแก้น้อยจะไม่ค่อยใช่ปัญหาเท่าไร ctrl+z ได้อยู่ แต่ถ้าแก้ไปหลายไฟล์และดันปิด editor ที่ใช้เขียนโค้ด มันจะ ctrl+z ไม่ได้ งานเข้าเลย ต้องมานั่งไล่ดูว่าตัวเองแก้อะไรไป 

สำหรับคนที่ใช้ Git แล้ว การจะทดลองเล่นกับโค้ดหรือลองเขียน เป็นความมันส์อย่างหนึ่ง เพราะเราสามารถ undo ไฟล์ได้ตลอดเวลาไม่ว่าเราจะเล่นเละเทะแค่ไหน ไม่ต้องมานั่งจำ

1. เข้าไปยัง C:\xampp\htdocs\my-website ทดลองแก้ไขโค้ดแล้วบันทึก

    ![](images/chapter-3/undo_01.png)
    
2. ไปที่ Source Tree จะมองเห็นว่าไฟล์ไหนถูกแก้ไขไป พร้อมทั้งแก้ไขอะไรไปทางเพนด้านขวามือ ให้คลิกที่ปุ่ม ... หลังไฟล์ ปุ่มมันเล็กต้องอาศัยการสังเกตนิดหนึ่ง จากนั้นคลิกเลือก Discard file

    ![](images/chapter-3/undo_02.png)
    
3. จะมี Dialog ขึ้นมาถามความแน่ใจ ให้คลิกยืนยัน OK 

    ![](images/chapter-3/undo_03.png)    
    
4. ไปสำรวจดูโค้ดครับ ทุกอย่างจะกลับมาเหมือนกับตอนก่อนทำการแก้ไข คำว่าก่อนการแก้ไข Git มันจะหมายถึง Commit ล่าสุด
    

## Undo All ##    

หากเราทำการแก้ไขไฟล์เยอะแยะไปหมด และเราต้องการยกเลิกมันทั้งหมด เราสามารถกระทำได้ในคำสั่งเดียว โดย

1. เข้าไปยัง C:\xampp\htdocs\my-website ลองแก้ไขโค้ด เพิ่มไฟล์ใหม่ๆเข้ามาสักหลายไฟล์

2. ไปที่ Source Tree เห็นไฟล์ที่แก้ไขและเพิ่มเข้ามาใหม่เยอะแยะไปหมด (ในภาพตัวอย่างมี 2 ไฟล์ ให้จินตนาการเป็น 200 ไฟล์นะครับ) ติ๊กเลือกไฟล์ทั้งหมดให้ไปอยู่ใน Staged files

    ![](images/chapter-3/undo_all_01.png)    

3. คลิกปุ่ม Discard

    ![](images/chapter-3/undo_all_02.png)    

3. หน้าต่าง Discard Option จะเปิดขึ้นมา คลิกแท็บ Reset All แล้วคลิกปุ่ม Revert All

    ![](images/chapter-3/undo_all_03.png)   
    
4. จะมีหน้าต่างถามยืนยันอีกทีหนึ่ง คลิก OK

    ![](images/chapter-3/undo_all_04.png)   
    
5. กลับไปดูโค้ดครับ ทุกอย่างจะถูก Reset กลับไปเหมือน Commit ก่อนหน้าจะเล่นโค้ด
   
    
## Show history ##    

เมื่อเราต้องการทราบว่า โค้ดมีอะไรเปลี่ยนแปลงไปบ้าง เราสามารถดูประวัติการแก้ไขของโค้ดได้ โดย

1. เปิด Source Tree ขึ้นมา คลิกไปที่แท็บ Log / History คลิกไล่ดูประวัติที่เราทำการ Commit ไว้ เราจะเห็นการเปลี่ยนแปลงของโค้ดทุกอย่าง 

    ![](images/chapter-3/history_01.png)   
    
ลองสังเกตคอมเม้นท์ที่พิมพ์ไว้ กับโค้ด ลองพิจารณาดูว่าเมื่อเราอ่านคอมเม้นท์ เราพอจะเข้าใจโค้ดได้คร่าวๆหรือไม่ว่า เราทำอะไรลงไป ดูบ่อยๆแล้วท่านจะเข้าใจได้ด้วยตัวเองว่าควรจะคอมเม้นท์ยังไง คอมเม้นท์คือสิ่งที่ไว้ใช้เตือนความจำ นั่นคือเป้าหมายของมัน ลองคิดและลองผิดลองถูกหลายๆครั้งครับ     


## Ignore some file ##

จะมีบางไฟล์ในโปรเจ็กที่เราไม่ต้องการจะ commit มันเข้า Repository ให้รก อย่างพวกไฟล์ temporary ต่างๆที่เกิดขึ้นจากการทดสอบรันโค้ด หรือไฟล์อื่นๆที่บาง editor มันสร้างขึ้นมา เราสามารถบอก Source Tree ได้ว่าถ้าเจอไฟล์ชื่อนี้ๆ หรือนามสกุลนี้ๆ ไม่ต้องสนใจ

1. เข้าไปยังโฟลเดอร์ C:\xampp\htdocs\my-website สร้างไฟล์ชื่อว่า testfile.tmp  สมมติเอาว่าไฟล์นี้แหละที่เราจะไม่ให้ Git มันสนใจ

    ![](images/chapter-3/ignore_some_file_01.png)   
    
2. ไปที่ Source Tree จะเห็นไฟล์ testfile.tmp คลิกปุ่ม ... ด้านหลังชื่อไฟล์ คลิกเลือก Ignore file

    ![](images/chapter-3/ignore_some_file_02.png)   
    
3. หน้าต่าง Ignore จะเปิดขึ้นมา มีหลายตัวเลือกให้เลือก เลือกตัวเลือกแรกจากนั้นคลิกปุ่ม OK
    Ignore exect filename(s) : Ignore ไฟล์ที่เลือก
    Ignore all files with this extension : Ignore ทุกไฟล์ที่มีนามสกุลเหมือนกับไฟล์ที่เลือก
    Ignore everything beneath : Ignore ทุกไฟล์ที่อยู่ภายใต้โฟลเดอร์ที่เลือก (ใน dropdown list)
    Ignore custom pattern : Ignore โดยระบุรูปแบบชื่อไฟล์เอง (เหมาะกับคนถนัด regular expression)

    ![](images/chapter-3/ignore_some_file_03.png)   
    
4. ไฟล์ testfile.tmp จะหายไปแล้วมีไฟล์ .gitignore มาแทน โดยเนื้อในเก็บชื่อไฟล์ testfile.tmp ไว้ ให้ติ๊กเลือกไฟล์ .gitignore ให้ไปอยู่ที่ Staged files

    ![](images/chapter-3/ignore_some_file_04.png)   

5. จากนั้น Commit ไฟล์ .gitignore ไปเก็บซะ

    ![](images/chapter-3/ignore_some_file_05.png)   
    
อันที่จริงแล้ว เราสร้างไฟล์ .gitignore (มีแต่นามสกุล ไม่มีชื่อ) แล้วพิมพ์ชื่อไฟล์ที่ต้องการ Ignore ลงไปในไฟล์ก็ได้ แต่เรื่องของเรื่องก็คือวินโดวมันไม่ยอมให้สร้างไฟล์ที่มีแต่นามสกุล ถ้าจะสร้างจริงๆ ต้องสร้างผ่านโปรแกรมสำหรับเขียนโปรแกรม เช่น editplus, programmer notepad, brackets เป็นต้น